#include "formachievementscategoriesedit.h"
#include "ui_formachievementscategoriesedit.h"

FormAchievementsCategoriesEdit::FormAchievementsCategoriesEdit(const SGame &aGame, QWidget *aParent) : QWidget(aParent), ui(new Ui::FormAchievementsCategoriesEdit),
    _game(aGame), _categoriesGame(_game) {
    ui->setupUi(this);
    init();
}

FormAchievementsCategoriesEdit::FormAchievementsCategoriesEdit(QWidget *aParent) : FormAchievementsCategoriesEdit(SGame(), aParent) {

}

FormAchievementsCategoriesEdit::~FormAchievementsCategoriesEdit() {
    delete ui;
}

void FormAchievementsCategoriesEdit::setGame(SGame aGame) {
    _game = aGame;
    _categoriesGame.setGame(_game);
    changeCategoryType(_typeCategory);
}

void FormAchievementsCategoriesEdit::setAchievements(SAchievements &aAchievements) {
    QFont font(Settings::getFontDefaultName(), 11);
    for (auto &achievement: aAchievements) {
        QListWidgetItem *item = new QListWidgetItem();
        item->setIcon(achievement.getIcon(_game.appId()));
        item->setText(achievement._displayName);
        item->setToolTip(achievement._description);
        item->setWhatsThis(achievement._apiName);
        item->setFont(font);
        ui->ListWidgetAll->addItem(item);
    }
}

void FormAchievementsCategoriesEdit::init() {
    ui->ListWidgetAll->setDropIndicatorShown(false);
    ui->ListWidgetAll->setDragEnabled(true);
    ui->ListWidgetAll->setDragDropMode(QAbstractItemView::DragDrop);
    ui->ListWidgetAll->setDefaultDropAction(Qt::DropAction::MoveAction);
    ui->ListWidgetAll->setWordWrap(true);

    ui->ListWidgetCategory->setDropIndicatorShown(false);
    ui->ListWidgetCategory->setDragEnabled(true);
    ui->ListWidgetCategory->setDragDropMode(QAbstractItemView::DragDrop);
    ui->ListWidgetCategory->setDefaultDropAction(Qt::DropAction::MoveAction);
    ui->ListWidgetCategory->setWordWrap(true);

    changeCategoryType(CategoryType::none);

    setIcons();
#define Connects {
    connect(ui->ButtonAddCategory,              &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonAddCategory_Clicked);
    //connect(ui->ButtonChangeCategory,           &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonChangeCategory_Clicked);
    connect(ui->ButtonDeleteAllCategories,      &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonDeleteAllCategories_Clicked);
    //connect(ui->ButtonAddValueCategory,         &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonAddValueCategory_Clicked);
    connect(ui->ButtonAcceptCategory,           &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonAcceptCategory_Clicked);
    connect(ui->ButtonCancelCategory,           &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonCancelCategory_Clicked);
    connect(ui->ButtonDeleteCategory,           &QPushButton::clicked,      this, &FormAchievementsCategoriesEdit::buttonDeleteCategory_Clicked);
    connect(ui->LineEditTitleCategory,          &QLineEdit::textChanged,    this, &FormAchievementsCategoriesEdit::lineEditTitleCategory_TextChanged);
#define ConnectsEnd }
}

void FormAchievementsCategoriesEdit::setIcons() {
    ui->ButtonAddCategory           ->setIcon(QIcon(Images::create()));
    //ui->ButtonChangeCategory        ->setIcon(QIcon(Images::change()));
    ui->ButtonDeleteCategory        ->setIcon(QIcon(Images::deleteIcon()));
    ui->ButtonDeleteAllCategories   ->setIcon(QIcon(Images::deleteAll()));
    //ui->ButtonAddValueCategory      ->setIcon(QIcon(Images::create()));
    ui->ButtonAcceptCategory        ->setIcon(QIcon(Images::apply()));
    ui->ButtonCancelCategory        ->setIcon(QIcon(Images::cancel()));
}

void FormAchievementsCategoriesEdit::updateFilter(const MyFilter &aFilter) {
//Неправильно сортирует, не учитывает перестановку
    for(int row = 0; row < ui->ListWidgetAll->count(); ++row) {
        ui->ListWidgetAll->setRowHidden(row, !aFilter.getData(row));
    }
}

void FormAchievementsCategoriesEdit::changeCategoryType(CategoryType aType) {
    switch (aType) {
    case CategoryType::none: {
        ui->ButtonAddCategory->setEnabled(true);
        ui->ButtonDeleteCategory->setVisible(false);
        ui->ButtonDeleteCategory->setEnabled(false);
        ui->ButtonChangeParent->setVisible(false);
        ui->ButtonChangeParent->setEnabled(false);
        ui->ButtonDeleteAllCategories->setEnabled(_categoriesGame.countTopCategories() != 0);

        ui->LineEditTitleCategory->setText("");
        ui->LineEditTitleCategory->setEnabled(false);
        ui->ListWidgetCategory->setEnabled(false);

        ui->ButtonAcceptCategory->setEnabled(false);
        ui->ButtonCancelCategory->setEnabled(false);

        ui->LabelCategoryParent->setText("");
        ui->TreeWidgetChangeParent->setEnabled(false);
        break;
    }
    case CategoryType::add: {
        ui->ButtonAddCategory->setEnabled(false);
        ui->ButtonDeleteCategory->setVisible(false);
        ui->ButtonDeleteCategory->setEnabled(false);
        ui->ButtonChangeParent->setVisible(true);
        ui->ButtonChangeParent->setEnabled(true);
        ui->ButtonDeleteAllCategories->setEnabled(false);

        ui->LineEditTitleCategory->setText("");
        ui->LineEditTitleCategory->setEnabled(true);
        ui->ListWidgetCategory->setEnabled(true);

        ui->ButtonAcceptCategory->setEnabled(true);
        ui->ButtonCancelCategory->setEnabled(true);

        ui->LabelCategoryParent->setText("");
        ui->TreeWidgetChangeParent->setEnabled(false);
        break;
    }
    case CategoryType::change: {
        ui->ButtonAddCategory->setEnabled(false);
        ui->ButtonDeleteCategory->setVisible(true);
        ui->ButtonDeleteCategory->setEnabled(true);
        ui->ButtonChangeParent->setVisible(true);
        ui->ButtonChangeParent->setEnabled(true);
        ui->ButtonDeleteAllCategories->setEnabled(false);

        ui->LineEditTitleCategory->setEnabled(true);
        ui->ListWidgetCategory->setEnabled(true);

        ui->ButtonAcceptCategory->setEnabled(true);
        ui->ButtonCancelCategory->setEnabled(true);

        ui->TreeWidgetChangeParent->setEnabled(false);
        break;
    }
    }
    _typeCategory = aType;
}

void FormAchievementsCategoriesEdit::buttonAddCategory_Clicked() {
    changeCategoryType(CategoryType::add);
}

void FormAchievementsCategoriesEdit::buttonDeleteAllCategories_Clicked() {
    QMessageBox deleteQuestion(QMessageBox::Question,
                           tr("Внимание!"),
                           tr("Вы уверены, что хотите удалить все категории?"));
    QAbstractButton *btnYes = deleteQuestion.addButton(tr("Да"), QMessageBox::YesRole);
    deleteQuestion.addButton(tr("Отмена"), QMessageBox::NoRole);
    deleteQuestion.exec();
    if(deleteQuestion.clickedButton() != btnYes) {
        return;
    }

    deleteQuestion.setText(tr("Данные о категориях будут утеряны навсегда, вы точно хотите удалить все категории?"));
    deleteQuestion.exec();
    if (deleteQuestion.clickedButton() != btnYes) {
        return;
    }

    _categoriesGame.deleteAll();
    emit s_categoriesIsUpdated(true);
}

void FormAchievementsCategoriesEdit::updateUniqueAchievements() {

}

#define Categorys {
void FormAchievementsCategoriesEdit::buttonCancelCategory_Clicked() {
//    while(!_values.isEmpty()) {
//        delete _values.takeFirst();
//    }
    changeCategoryType(CategoryType::none);
}

void FormAchievementsCategoriesEdit::buttonAcceptCategory_Clicked() {
    if (_typeCategory != CategoryType::add && _typeCategory != CategoryType::change) {
        qWarning() << "on save category unknown type";
        return;
    }

    QString newTitle = ui->LineEditTitleCategory->text();
    if (newTitle == "") {
        QMessageBox::warning(this, tr("Ошибка"), tr("Название категории пустое!"));
        return;
    }
    int targetCategory = //_typeCategory == CategoryType::changeSelected ?
                        //ui->ComboBoxCategories->currentIndex() - 1 :
                        _categoriesGame.countTopCategories();

    bool isAlreadyExist = std::any_of(_categoriesGame.begin(),
                                      _categoriesGame.end(),
                                      [=](Category sCategory) {
                                          return (sCategory.title() == newTitle);
//                                          && (sCategory.order() != targetCategory));
                                      });
    if (isAlreadyExist) {
        QMessageBox::warning(this, tr("Ошибка"), tr("Такая категория уже есть!"));
        return;
    }

//    if (_isNoValue) {
//        createCategoryNoValue(targetCategory, newTitle);
//    } else {
//        if (!createCategoryValue(targetCategory, newTitle)) {
//            return;
//        }
//    }

    emit s_categoriesIsUpdated(true);
    switch (_typeCategory) {
    case CategoryType::add: {
        QMessageBox::information(this, tr("Успешно"), tr("Категория была добавлена!"));
        break;
    }
    case CategoryType::change: {
        QMessageBox::information(this, tr("Успешно"), tr("Категория была изменена!"));
        break;
    }
    default: {
        qWarning() << "save category with unknown type";
    }
    }
    buttonCancelCategory_Clicked();
}

void FormAchievementsCategoriesEdit::buttonDeleteCategory_Clicked() {
    if (_typeCategory != CategoryType::change) {
        return;
    }
//    if (ui->ComboBoxCategories->currentIndex() == 0) {
//        return;
//    }
    QMessageBox::StandardButton clickedButton = QMessageBox::question(this,
                                                                      tr("Внимание"),
                                                                      tr("Вы уверены, что хотите удалить категорию?"),
                                                                      QMessageBox::Yes |
                                                                      QMessageBox::No);
    if (clickedButton == QMessageBox::No) {
        return;
    }
    //_categoriesGame.deleteCategory(ui->ComboBoxCategories->currentIndex() - 1);
    emit s_categoriesIsUpdated(true);
    QMessageBox::information(this, tr("Успешно"), tr("Категория была удалена!"));
    buttonCancelCategory_Clicked();
}

void FormAchievementsCategoriesEdit::lineEditTitleCategory_TextChanged(const QString &arg1) {
//    if (_tableAchievements->getColumnCount() > c_tableCategoryColumnNoValue) {
//        _tableAchievements->changeHorizontalTitle(c_tableCategoryColumnNoValue, arg1);
//    }
}
#define CategoryEnd }
